<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Djave的博客</title>
  
  <subtitle>记录一些开发过程中的心得</subtitle>
  <link href="http://djave5656.com/atom.xml" rel="self"/>
  
  <link href="http://djave5656.com/"/>
  <updated>2021-08-21T09:38:21.794Z</updated>
  <id>http://djave5656.com/</id>
  
  <author>
    <name>Gavin Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重绘和回流</title>
    <link href="http://djave5656.com/2021/08/21/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/"/>
    <id>http://djave5656.com/2021/08/21/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/</id>
    <published>2021-08-21T09:09:44.000Z</published>
    <updated>2021-08-21T09:38:21.794Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><blockquote><p>当页面中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的时候，比如background-color。则称为重绘。</p></blockquote><h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><blockquote><p>当页面中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的时候，比如background-color。则称为重绘。</p></blockquote><blockquote><p><em><strong>tips: 回流必将引起重绘，而重绘不一定会引起回流。</strong></em></p></blockquote><h2 id="CSS中的-opacity、visibility、display-属性"><a href="#CSS中的-opacity、visibility、display-属性" class="headerlink" title="CSS中的 opacity、visibility、display 属性"></a>CSS中的 opacity、visibility、display 属性</h2><table><thead><tr><th align="center"></th><th align="center">opacity: 0</th><th align="center">visibility: 0</th><th align="center">display: none</th></tr></thead><tbody><tr><td align="center">是否占据页面空间</td><td align="center">占据</td><td align="center">占据</td><td align="center">不占据</td></tr><tr><td align="center">子元素设置该属性其他值是否可以继续显示</td><td align="center">不可以</td><td align="center">可以</td><td align="center">不可以</td></tr><tr><td align="center">自身绑定的事件是否能继续触发</td><td align="center">能触发</td><td align="center">不能触发</td><td align="center">不能触发</td></tr><tr><td align="center">是否影响遮挡住的元素触发事件</td><td align="center">影响</td><td align="center">不影响</td><td align="center">不影响</td></tr><tr><td align="center">属性值改变是否产生回流（reflow）</td><td align="center">不产生</td><td align="center">不产生</td><td align="center">产生</td></tr><tr><td align="center">属性值改变是否产生重绘（repaint）</td><td align="center">不一定产生</td><td align="center">产生</td><td align="center">产生</td></tr><tr><td align="center">该属性是否支持transition</td><td align="center">支持</td><td align="center">支持</td><td align="center">不支持</td></tr></tbody></table><ul><li>opacity: 用来设置透明度，实际上透明度改变后，GPU在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。不过这个前提是这个被修改 opacity 本身必须是一个图层，如果图层下还有其他节点，GPU也会将他们透明化</li><li>display: 定义建立布局时元素生成的显示框类型</li><li>visibility: 用来设置元素是否可见，visibility属性虽然支持过渡，但是，不是平滑的过渡，而是进行了一个延时，并且它只是 从 visible 过渡 到 hidden 有延迟，从 hidden 过渡到 visible 不延迟</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CSS" scheme="http://djave5656.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://djave5656.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS中常见的问题（一）</title>
    <link href="http://djave5656.com/2021/08/16/001-JS%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://djave5656.com/2021/08/16/001-JS%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-08-16T09:32:17.000Z</published>
    <updated>2021-08-18T16:52:20.902Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、闭包"><a href="#一、闭包" class="headerlink" title="一、闭包"></a><font color=orange>一、闭包</font></h2><blockquote><p>闭包说的通俗一点就是打通了一条在函数外部访问函数内部作用域的通道。</p><blockquote><p>一句话可以概括：闭包就是能够读取其他函数内部变量的函数，或者子函数在外调用， 子函数所在的父函数的作用域不会被释放。</p></blockquote></blockquote><ul><li>正常情况下函数外部是访问不到函数内部作用域变量的</li><li>内部函数调用外层函数的局部变量</li><li>表象判断是不是闭包:函数嵌套函数,内部函数被 <code>return</code></li><li>内部函数调用外层函数的局部变量</li><li>优点：可以隔离作用域，不造成全局污染</li><li>缺点：由于闭包长期驻留内存，则长期这样会导致内存泄露</li><li>如何解决内存泄露：将暴露全外部的闭包变量置为 <code>null</code></li><li>适用场景：封装组件，<code>for</code>循环和定时器结合使用,<code>for</code>循环和<code>dom</code>事件结合.可以在性能优化的过程中,节流防抖函数的使用,导航栏获取下标的使用</li></ul><h2 id="二、JS中的原型链的理解"><a href="#二、JS中的原型链的理解" class="headerlink" title="二、JS中的原型链的理解"></a><font color=orange>二、JS中的原型链的理解</font></h2><blockquote><p>原型链是理解JS面向对象很重要的一点，这里主要涉及到两个点，一是__proto__ ，二是prototype。</p></blockquote><ul><li><p>Example1: 举个例子吧，这样还好说点，例如：我用function创建一个Person类，然后用new Person创建一个对象的实例假如叫p1吧，在Person类的原型 prototype添加一个方法</p></li><li><p>Example2: 例如：play方法,那对象实例p1如何查找到play这个方法呢，有一个查找过程，具体流程是这样的</p></li></ul><ol><li>首先在p1对象实例上查找是否有有play方法</li><li>如果有则调用执行，如果没有则用p1.__proto__(__proto__是一个指向的作用,指向上一层的原型)往创建p1的类的原型上查找，也就是说往Person.prototype上查找</li><li>如果在Person.prototype找到play方法则执行，否则继续往上查找，则用Person.prototye.__proto__继续往上查找，找到Object.prototype</li><li>如果Object.prototype有play方法则执行之，否则用Object.prototype.__proto__继续再往上查找，但Object.prototpye.__proto__上一级是null,也就是原型链的顶级，结束原型链的查找，这是我对原型链的理解</li></ol><h2 id="三、JS继承（含ES6的）–或者有两个类A和B-B怎么继承A？"><a href="#三、JS继承（含ES6的）–或者有两个类A和B-B怎么继承A？" class="headerlink" title="三、JS继承（含ES6的）–或者有两个类A和B,B怎么继承A？"></a><font color=orange>三、JS继承（含ES6的）–或者有两个类A和B,B怎么继承A？</font></h2><blockquote><p>JS继承实现方式也很多，主要分ES5和ES6继承的实现</p></blockquote><h3 id="ES5实现继承"><a href="#ES5实现继承" class="headerlink" title="ES5实现继承"></a><font color=skyblue>ES5实现继承</font></h3><ul><li>ES5实现继承主要是基于prototype来实现的，具体有三种方法<ol><li>原型链继承：即 B.prototype=new A()</li><li>二是借用构造函数继承(call或者apply的方式继承)</li><li>组合继承: 组合继承是结合第一种和第二种方式</li></ol></li></ul><h3 id="ES6实现继承"><a href="#ES6实现继承" class="headerlink" title="ES6实现继承"></a><font color=skyblue>ES6实现继承</font></h3><blockquote><p>ES6继承是目前比较新，并且主流的继承方式，用class定义类，用extends继承类，用super()表示父类</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">例如：创建A类</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">A</span> ｛</span></span><br><span class="line"><span class="class">  <span class="title">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="comment">//构造器代码，new时自动执行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法1( ) &#123; //A类的方法 &#125;</span></span><br><span class="line">  <span class="comment">// 方法2( ) &#123; //A类的方法 &#125;</span></span><br><span class="line"></span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建B类并继承A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>()  <span class="comment">//表示父类</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化B类： </span></span><br><span class="line"><span class="keyword">var</span> b1=<span class="keyword">new</span> B( )</span><br><span class="line">b1.方法<span class="number">1</span>( )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、JS绑定原生事件"><a href="#四、JS绑定原生事件" class="headerlink" title="四、JS绑定原生事件"></a><font color=orange>四、JS绑定原生事件</font></h2><ul><li><p>JS原生绑定事件主要为三种：</p><ol><li>html事件处理程序</li><li>DOM0级事件处理程序</li><li>DOM2级事件处理程序</li></ol></li><li><p>其中：html事件现在早已不用了，就是在html各种标签上直接添加事件，类似于css的行内样式</p></li><li><p>缺点是不好维护，因为散落在标签中,也就是耦合度太高</p></li><li><p>例如：<code>&lt;button onclick=”事件处理函数”&gt;点我&lt;/button&gt;</code></p></li><li><p>第二类是DOM0级事件，目前在PC端用的还是比较多的绑定事件方式，兼容性也好，主要是先获取dom元素，然后直接给dom元素添加事件</p></li><li><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;id元素&#x27;</span>)</span><br><span class="line">  btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">//要处理的事件逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移除DOM0事件: <code>btn.onclick=null;</code></p></li><li><p>优点：兼容性好</p></li><li><p>缺点：只支持冒泡，不支持捕获</p></li><li><p>第三类是DOM2级事件，移动端用的比较多，也有很多优点，提供了专门的绑定和移除方法</p></li><li><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(‘id元素’)</span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">btn.addEventListener(‘click’,绑定的事件处理函数名,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">//移除事件</span></span><br><span class="line">btn.removeEventListener(‘click’,要移除的事件处理函数名，<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li><li><p>优点：支持给个元素绑定多个相同事件，支持冒泡和捕获事件机制</p></li></ul><h2 id="五、JS原生常用dom操作方法"><a href="#五、JS原生常用dom操作方法" class="headerlink" title="五、JS原生常用dom操作方法"></a><font color=orange>五、JS原生常用dom操作方法</font></h2><ul><li>查找<ol><li><code>getElementByid</code></li><li><code>getElementsByTagName</code></li><li><code>querySelector</code></li><li><code>querySelectorAll</code></li></ol></li><li>插入<ol><li><code>appendChild</code></li><li><code>insertBefore</code></li></ol></li><li>删除<ol><li><code>removeChild</code></li></ol></li><li>克隆<ol><li><code>cloneNode</code></li><li><code>setAttribute(“属性名”,”值”)</code></li><li><code>getAttibute(“属性名”)</code></li></ol></li></ul><h2 id="六、ES6新增特性"><a href="#六、ES6新增特性" class="headerlink" title="六、ES6新增特性"></a><font color=orange>六、ES6新增特性</font></h2><ul><li><font color=DarkOrange>let/const</font></li><li><font color=DarkOrange>函数优化</font><ol><li>函数参数默认值</li><li>箭头函数</li><li>对象的函数属性简写</li><li>箭头函数结合解构表达式</li><li>数组中新增了<code>map</code>和<code>reduce</code>方法</li></ol></li><li><font color=DarkOrange>模板字符串</font></li><li><font color=DarkOrange>解构赋值</font></li><li><font color=DarkOrange>模块的导入(<code>import</code>)和导出(<code>export default/export</code>)</font></li><li><font color=DarkOrange>Promise规范(异步操作的同步代码)</font><blockquote><p>使用：通过new promise创建一个promise对象，里面有一个参数，参数是一个回调函数，回调函数中有2个参数，resolve，reject resolve()当异步执行成功的时候调用的方法，reject()当异步失败的时候调用的方法。除此之外promise有一个then方法，当成功的时候执行第一个回调函数，当失败的时候执行第二个回调函数。第二个回调函数也可以通过promise对象.catch调用。</p></blockquote><ol><li>Promise.all():当所有的异步代码都执行完毕以后才会执行.then中的操作</li><li>Promise.race():只要有一个promise执行完毕后就会执行.then操作</li><li>实现多个异步同步执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p2()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p3();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p4();</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><font color=DarkOrange>类的支持</font></li><li><font color=DarkOrange><code>ES6</code>中<code>set集合</code>和<code>Map集合</code></font><ul><li><code>set</code>是<code>ES6</code>提供的一种新的数据结构，类似于数组，但是成员的值是唯一的没有重复的，接受的参数是一个数组方法有：<ol><li><code>add()</code>:添加</li><li><code>delete()</code>:删除</li><li><code>size</code>:长度</li><li><code>has()</code>:查找</li><li><code>clear</code>：清除所有</li></ol></li><li><code>map</code>类似于对象，也是键值对的集合， 但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键方法有：<ol><li><code>set()</code>:设置</li><li><code>get()</code>:获取</li><li><code>delete()</code>:删除</li><li><code>has()</code>:查找</li><li><code>clear()</code>:清除所有</li></ol></li></ul></li><li><font color=DarkOrange>第七种数据类型<code>Symbol</code></font></li><li><font color=DarkOrange><code>ES6</code>中字符串新增方法</font><ol><li>字符串模板</li><li><code>includes</code></li><li><code>startswith</code></li><li><code>endsWith</code></li></ol></li><li><font color=DarkOrange><code>ES6</code>中数组新增方法</font><ol><li><code>Array.of  // 将一组数值转化为数组</code></li><li><code>Array.from // 将伪数组转为数组</code></li></ol></li></ul><h2 id="七、对JS面向对象的理解"><a href="#七、对JS面向对象的理解" class="headerlink" title="七、对JS面向对象的理解"></a><font color=orange>七、对JS面向对象的理解</font></h2><ul><li>JS面向对象主要基于function来实现的，通过function来模拟类，通过prototype来实现类方法的共享，跟其他语言有着本质的不同</li><li>自从有了ES6后，把面向对象类的实现更像后端语言的实现了，通过class来定义类，通过extends来继承父类，其实ES6类的实现本质上是一个语法糖，不过对于开发简单了好多</li></ul><h2 id="八、JS中数组的常用方法"><a href="#八、JS中数组的常用方法" class="headerlink" title="八、JS中数组的常用方法"></a><font color=orange>八、JS中数组的常用方法</font></h2><ul><li>push</li><li>pop</li><li>unshift</li><li>shift</li><li>splice</li><li>join</li><li>concat</li><li>forEach</li><li>filter</li><li>map</li><li>reduce</li><li>sort</li><li>some</li><li>every</li></ul><h2 id="九、JS作用域和作用域链"><a href="#九、JS作用域和作用域链" class="headerlink" title="九、JS作用域和作用域链"></a><font color=orange>九、JS作用域和作用域链</font></h2><blockquote><p>JS作用域也就是JS识别变量的范围，作用域链也就是JS查找变量的顺序</p></blockquote><ul><li>作用域<ul><li>全局作用域<blockquote><p>定义在window下的变量范围，在任何地方都可以访问</p></blockquote></li><li>局部作用域<blockquote><p>只在函数内部定义的变量范围</p></blockquote></li><li>ES6的块级作用域<blockquote><p>简单来说用let和const在任意的代码块中定义的变量都认为是块级作用域中的变量</p></blockquote></li></ul></li></ul><blockquote><p>tips: 尽量不要使用全局变量，因为容易导致全局的污染，命名冲突，对bug查找不利。</p></blockquote><ul><li>作用域链就是由最内部的作用域往最外部,查找变量的过程.形成的链条就是作用域链</li></ul><h2 id="十、从输入URL到页面加载完中间发生了什么（简述）"><a href="#十、从输入URL到页面加载完中间发生了什么（简述）" class="headerlink" title="十、从输入URL到页面加载完中间发生了什么（简述）"></a><font color=orange>十、从输入URL到页面加载完中间发生了什么（简述）</font></h2><ol><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回需要的数据</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><blockquote><p>输入了一个域名,域名要通过DNS解析找到这个域名对应的服务器地址(ip),通过TCP请求链接服务,通过WEB服务器(apache)返回数据,浏览器根据返回数据构建DOM树,通过css渲染引擎及js解析引擎将页面渲染出来,关闭tcp连接</p></blockquote><h2 id="十一、JS事件代理（也称事件委托）及实现原理"><a href="#十一、JS事件代理（也称事件委托）及实现原理" class="headerlink" title="十一、JS事件代理（也称事件委托）及实现原理"></a><font color=orange>十一、JS事件代理（也称事件委托）及实现原理</font></h2><blockquote><p>JS事件代理就是通过给父级元素（例如：ul）绑定事件，不给子级元素(例如：li)绑定事件，然后当点击子级元素时，通过事件冒泡机制在其绑定的父元素上触发事件处理函数</p></blockquote><ul><li>主要目的: 是为了提升性能，因为我不用给每个子级元素绑定事件，只给父级元素绑定一次就好了,在原生js里面是通过event对象的targe属性实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">ul.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; <span class="comment">//e指event,事件对象</span></span><br><span class="line">  <span class="keyword">var</span> target = e.target || e.srcElement; <span class="comment">//target获取触发事件的目标(li)</span></span><br><span class="line">  <span class="keyword">if</span> (target.nodeName.toLowerCase() == <span class="string">&#x27;li&#x27;</span>) &#123; <span class="comment">//目标(li)节点名转小写字母，不转的话是大写字母</span></span><br><span class="line">    alert(target.innerHTML)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jq方式实现: <code>$(“ul”).on(“click”,“li”,function()&#123;//事件逻辑&#125;)</code></li><li>其中第二个参数指的是触发事件的具体目标，特别是给动态添加的元素绑定事件，这个特别起作用</li></ul><h2 id="十二、JS数据类型"><a href="#十二、JS数据类型" class="headerlink" title="十二、JS数据类型"></a><font color=orange>十二、JS数据类型</font></h2><ul><li>基本数据类型<ul><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol</li></ul></li><li>复合类型<ul><li>Object</li><li>function</li><li>Array</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JS" scheme="http://djave5656.com/categories/JS/"/>
    
    
    <category term="JS" scheme="http://djave5656.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 JS 中的事件循环机制</title>
    <link href="http://djave5656.com/2021/08/15/JS/"/>
    <id>http://djave5656.com/2021/08/15/JS/</id>
    <published>2021-08-15T02:56:46.000Z</published>
    <updated>2021-08-17T02:11:53.552Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a><font color=orange>预备知识</font></h2><h3 id="单线程与多线程"><a href="#单线程与多线程" class="headerlink" title="单线程与多线程"></a><font color=skyblue>单线程与多线程</font></h3><h4 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a><font color=Fuchsia>单线程</font></h4><ul><li>每个正在运行的程序（即进程），至少包括一个线程，这个线程叫主线程</li><li>主线程在程序启动时被创建，用于执行main函数</li><li>只有一个主线程的程序，称作单线程程序</li><li>主线程负责执行程序的所有代码（UI展现以及刷新，网络请求，本地存储等等）。这些代码只能顺序执行，无法并发执行</li></ul><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><font color=Fuchsia>多线程</font></h4><ul><li>拥有多个线程的程序，称作多线程程序。</li><li>iOS允许用户自己开辟新的线程，相对于主线程来讲，这些线程，称为子线程</li><li>可以根据需要开辟若干子线程</li><li>子线程和主线程都是独立的运行单元，各自的执行互不影响，因此能够并发执行</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a><font color=Fuchsia>区别</font></h4><ul><li>单线程程序：只有一个线程，代码顺序执行，容易出现代码阻塞（页面假死）</li><li>多线程程序：有多个线程，线程间独立运行，能有效地避免代码阻塞，并且提高程序的运行性能</li></ul><h3 id="为什么-JS-是单线程"><a href="#为什么-JS-是单线程" class="headerlink" title="为什么 JS 是单线程"></a><font color=skyblue>为什么 JS 是单线程</font></h3><blockquote><p>  我们都知道，javascript从诞生之日起就是一门单线程的非阻塞的脚本语言。这是由其最初用途来决定的：<strong>与浏览器交互</strong>。</p><blockquote><p>单线程意味着，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。而非阻塞则是当代码需要进行一项异步任务（无法立刻返回结果，需要花一定时间才能返回的任务，如I/O事件）的时候，主线程会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。</p><blockquote><p>单线程是必要的，也是javascript这门语言的基石，原因之一在其最初也是最主要的执行环境——浏览器中，我们需要进行各种各样的dom操作。试想一下 如果javascript是多线程的，那么当两个线程同时对dom进行一项操作，例如一个向其添加事件，而另一个删除了这个dom，此时该如何处理呢？因此，为了保证不会 发生类似于这个例子中的情景，javascript选择只用一个主线程来执行代码，这样就保证了程序执行的一致性。</p><blockquote><p>当然，现如今人们也意识到，单线程在保证了执行顺序的同时也限制了javascript的效率，因此开发出了web worker技术。这项技术号称让javascript成为一门多线程语言。然而，使用web worker技术开的多线程有着诸多限制，例如：所有新线程都受主线程的完全控制，不能独立执行。这意味着这些“线程” 实际上应属于主线程的子线程。</p><blockquote><p>另外，这些子线程并没有执行I/O操作的权限，只能为主线程分担一些诸如计算等任务。所以严格来讲这些线程并没有完整的功能，也因此这项技术并非改变了javascript语言的单线程本质。</p><blockquote><p>可以预见，未来的javascript也会一直是一门单线程的语言。</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><ul><li><em><strong>JS作为主要运行在浏览器的脚本语言，JS主要用途之一是操作DOM</strong></em></li><li><em><strong>如果JS同时有两个线程，同时对同一个DOM进行操作，这时浏览器应该听哪个线程的，就没法判断其优先级</strong></em></li><li><em><strong>为了避免这种问题，JS必须是一门单线程语言，并且在未来这个特点也不会改变</strong></em></li><li><em><strong>JS 主要是通过 event loop（事件循环）来实现其“非阻塞”的特点</strong></em></li></ul><blockquote><p>”JS是单线程的”指的是JS 引擎线程。</p><blockquote><p>在浏览器环境中，有JS 引擎线程和渲染线程，且两个线程互斥。<br>Node环境中，只有JS 线程。</p></blockquote></blockquote><hr /><h2 id="执行栈与事件队列"><a href="#执行栈与事件队列" class="headerlink" title="执行栈与事件队列"></a><font color=orange>执行栈与事件队列</font></h2><h3 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a><font color=skyblue>执行栈</font></h3><blockquote><p>是一个存储函数调用的栈结构，遵循先进后出的原则。</p></blockquote><ol><li>当javascript代码执行的时候会将不同的变量存于内存中的不同位置：堆（heap）和栈（stack）中来加以区分。其中，堆里存放着一些对象。而栈中则存放着一些基础类型变量以及对象的指针。 但是我们这里说的执行栈和上面这个栈的意义却有些不同。</li><li>当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫执行上下文。这个执行环境中存在着这个方法的私有作用域，上层作用域的指向，方法的参数，这个作用域中定义的变量以及这个作用域的this对象。 而当一系列方法被依次调用的时候，因为js是单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈。</li><li>当一个脚本第一次执行的时候，js引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。如果当前执行的是一个方法，那么js会向执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中的代码。当这个执行环境中的代码 执行完毕并返回结果后，js会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境。。这个过程反复进行，直到执行栈中的代码全部执行完毕。</li><li>一个方法执行会向执行栈中加入这个方法的执行环境，在这个执行环境中还可以调用其他方法，甚至是自己，其结果不过是在执行栈中再添加一个执行环境。这个过程可以是无限进行下去的，除非发生了栈溢出，即超过了所能使用内存的最大值。</li></ol><blockquote><p>Tips: 以上的过程说的都是同步代码的执行。那么当一个异步代码（如发送ajax请求数据）执行后会如何呢？前文提过，js的另一大特点是非阻塞，实现这一点的关键在于下面要说的这项机制——事件队列（Task Queue）。</p></blockquote><h3 id="事件队列"><a href="#事件队列" class="headerlink" title="事件队列"></a><font color=skyblue>事件队列</font></h3><ol><li>js引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。</li><li>当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为事件队列。</li><li>被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。</li><li>如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。</li></ol><p><img src="https://pic2.zhimg.com/80/v2-da078fa3eadf3db4bf455904ae06f84b_hd.jpg"></p><ul><li>上图中的stack表示我们所说的执行栈，web apis则是代表一些异步事件，而callback queue即事件队列。</li></ul><h2 id="事件循环（Event-Loop）"><a href="#事件循环（Event-Loop）" class="headerlink" title="事件循环（Event Loop）"></a><font color=orange>事件循环（Event Loop）</font></h2><blockquote><p>JS引擎常驻于内存中，等待宿主将JS代码或函数传递给它。<br>也就是等待宿主环境分配宏观任务，反复等待 - 执行即为事件循环。</p></blockquote><h3 id="普通的异步函数的执行过程"><a href="#普通的异步函数的执行过程" class="headerlink" title="普通的异步函数的执行过程"></a><font color=skyblue>普通的异步函数的执行过程</font></h3><p><img src="https://s4.aconvert.com/convert/p3r68-cdx67/a5dgv-6gmle.jpg"></p><ol><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</li><li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li><li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li></ol><p><img src="https://s4.aconvert.com/convert/p3r68-cdx67/ah2uo-so9vo.jpg"></p><p><em><strong><font color=skyblue>Event Loop中，每一次循环称为tick，每一次tick的任务如下:</font></strong></em></p><ul><li>执行栈选择最先进入队列的宏任务（一般都是script），执行其同步代码直至结束；</li><li>检查是否存在微任务，有则会执行至微任务队列为空；</li><li>如果宿主为浏览器，可能会渲染页面；</li><li>开始下一轮tick，执行宏任务中的异步代码（setTimeout等回调）。</li></ul><h2 id="宏任务-macro-task-与微任务-micro-task"><a href="#宏任务-macro-task-与微任务-micro-task" class="headerlink" title="宏任务(macro-task)与微任务(micro-task)"></a><font color=orange>宏任务(macro-task)与微任务(micro-task)</font></h2><table><thead><tr><th align="center"></th><th align="left">宏任务（macrotask）</th><th align="left">微任务（microtask）</th></tr></thead><tbody><tr><td align="center">谁发起的</td><td align="left">宿主（Node、浏览器）</td><td align="left">JS引擎</td></tr><tr><td align="center">具体事件</td><td align="left">1. script (可以理解为外层同步代码)<br/>2. setTimeout/setInterval<br/> 3. UI rendering/UI事件<br/> 4. postMessage，MessageChannel<br/> 5. setImmediate，I/O（Node.js）</td><td align="left">1. Promise<br/> 2. MutaionObserver<br/> 3. Object.observe（已废弃；Proxy 对象替代）<br/> 4. process.nextTick（Node.js）</td></tr><tr><td align="center">谁先运行</td><td align="left">后运行</td><td align="left">先运行</td></tr><tr><td align="center">会触发新一轮Tick吗</td><td align="left">会</td><td align="left">不会</td></tr></tbody></table><ul><li>宏任务：setTimeout，setInterval，setImmediate，I/O(磁盘读写或网络通信)，UI交互事件</li><li>微任务：process.nextTick，Promise.then</li></ul><p><img src="https://s4.aconvert.com/convert/p3r68-cdx67/aqgv9-c2vrk.jpg"></p><ol><li><em><strong><font color=skyblue>浏览器环境中执行方法时，先将执行栈中的任务清空，再将微任务推到执行栈中并清空，之后检查是否存在宏任务，若存在则取出一个宏任务，执行完成检查是否有微任务，以此循环…</font></strong></em></li></ol><ol start="2"><li><em><strong><font color=skyblue>Event Loop在浏览器与node环境中的区别:</font></strong></em><ol><li>浏览器环境每次执行一个宏任务，再去检查微任务</li><li>node会清空当前所处阶段的队列，即执行所有task，再去检查微任务</li></ol></li></ol><p><img src="https://pic3.zhimg.com/v2-727add696ed5dff9220d08950603d232_b.gif"></p><hr /><h2 id="拓展应用"><a href="#拓展应用" class="headerlink" title="拓展应用"></a><font color=orange>拓展应用</font></h2><h3 id="一、async和await是如何处理异步任务的？"><a href="#一、async和await是如何处理异步任务的？" class="headerlink" title="一、async和await是如何处理异步任务的？"></a><font color=skyblue>一、async和await是如何处理异步任务的？</font></h3><ul><li>简单说，async是通过Promise包装异步任务。</li><li>上代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async2 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br></pre></td></tr></table></figure><ul><li>改为ES5的写法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(&#x27;async2 end&#x27;)</span></span><br><span class="line">  async2() </span><br><span class="line">  ...</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 执行async1()函数await之后的语句</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>当调用 async1 函数时，会马上输出 async2 end，并且函数返回一个 Promise，接下来在遇到 await的时候会就让出线程开始执行 async1 外的代码（可以把 await 看成是让出线程的标志）。</li><li>然后当同步代码全部执行完毕以后，就会去执行所有的异步代码，那么又会回到 await 的位置，去执行 then 中的回调。</li></ul><h3 id="二、setTimeout，setImmediate谁先执行？"><a href="#二、setTimeout，setImmediate谁先执行？" class="headerlink" title="二、setTimeout，setImmediate谁先执行？"></a><font color=skyblue>二、setTimeout，setImmediate谁先执行？</font></h3><ul><li>setImmediate和process.nextTick为Node环境下常用的方法（IE11支持setImmediate），所以，后续的分析都基于Node宿主。</li><li>Node.js是运行在服务端的js，虽然用到也是V8引擎，但由于服务目的和环境不同，导致了它的API与原生JS有些区别，其Event Loop还要处理一些I/O，比如新的网络连接等，所以与浏览器Event Loop不太一样。</li><li>执行顺序如下：<ul><li>timers: 执行setTimeout和setInterval的回调</li><li>pending callbacks: 执行延迟到下一个循环迭代的 I/O 回调</li><li>idle, prepare: 仅系统内部使用</li><li>poll: 检索新的 I/O 事件;执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。</li><li>check: setImmediate在这里执行</li><li>close callbacks: 一些关闭的回调函数，如：socket.on(‘close’, …)</li></ul></li><li>一般来说，setImmediate会在setTimeout之前执行</li><li>上代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;outer&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>其执行顺序为：</li></ul><ol><li>外层是一个setTimeout，所以执行它的回调的时候已经在timers阶段了</li><li>处理里面的setTimeout，因为本次循环的timers正在执行，所以其回调其实加到了下个timers阶段</li><li>处理里面的setImmediate，将它的回调加入check阶段的队列</li><li>外层timers阶段执行完，进入pending callbacks，idle, prepare，poll，这几个队列都是空的，所以继续往下</li><li>到了check阶段，发现了setImmediate的回调，拿出来执行</li><li>然后是close callbacks，队列是空的，跳过</li><li>又是timers阶段，执行console.log(‘setTimeout’)</li></ol><ul><li>但是，如果当前执行环境不是timers阶段，就不一定了。。。。顺便科普一下Node里面对setTimeout的特殊处理：setTimeout(fn, 0)会被强制改为setTimeout(fn, 1)。</li><li>上代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>其执行顺序为：</li></ul><ol><li>遇到setTimeout，虽然设置的是0毫秒触发，但是被node.js强制改为1毫秒，塞入times阶段</li><li>遇到setImmediate塞入check阶段</li><li>同步代码执行完毕，进入Event Loop</li><li>先进入times阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足setTimeout条件，执行回调，如果没过1毫秒，跳过</li><li>跳过空的阶段，进入check阶段，执行setImmediate回调</li></ol><ul><li>可见，1毫秒是个关键点，所以在上面的例子中，setImmediate不一定在setTimeout之前执行了</li></ul><h3 id="三、Promise，process-nextTick谁先执行？"><a href="#三、Promise，process-nextTick谁先执行？" class="headerlink" title="三、Promise，process.nextTick谁先执行？"></a><font color=skyblue>三、Promise，process.nextTick谁先执行？</font></h3><ul><li>因为process.nextTick为Node环境下的方法，所以后续的分析依旧基于Node。</li><li>process.nextTick() 是一个特殊的异步API，其不属于任何的Event Loop阶段。事实上Node在遇到这个API时，Event Loop根本就不会继续进行，会马上停下来执行process.nextTick()，这个执行完后才会继续Event Loop。</li><li>所以，nextTick和Promise同时出现时，肯定是nextTick先执行，原因是nextTick的队列比Promise队列优先级更高。</li></ul><h3 id="四、应用场景-Vue中的vm-nextTick"><a href="#四、应用场景-Vue中的vm-nextTick" class="headerlink" title="四、应用场景 - Vue中的vm.$nextTick"></a><font color=skyblue>四、应用场景 - Vue中的vm.$nextTick</font></h3><ul><li>vm.$nextTick 接受一个回调函数作为参数，用于将回调延迟到下次DOM更新周期之后执行。</li><li>这个API就是基于事件循环实现的。</li><li>“下次DOM更新周期”的意思就是下次微任务执行时更新DOM，而vm.$nextTick就是将回调函数添加到微任务中（在特殊情况下会降级为宏任务）。</li><li>因为微任务优先级太高，Vue 2.4版本之后，提供了强制使用宏任务的方法。</li><li>vm.$nextTick优先使用Promise，创建微任务。</li><li>如果不支持Promise或者强制开启宏任务，那么，会按照如下顺序发起宏任务：</li></ul><ol><li>优先检测是否支持原生 setImmediate（这是一个高版本 IE 和 Edge 才支持的特性）</li><li>如果不支持，再去检测是否支持原生的MessageChannel</li><li>如果也不支持的话就会降级为 setTimeout。</li></ol><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a><font color=skyblue>小试牛刀</font></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async2 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Promise&#x27;</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JS" scheme="http://djave5656.com/categories/JS/"/>
    
    
    <category term="JS" scheme="http://djave5656.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 中的常见的几种布局方式</title>
    <link href="http://djave5656.com/2021/08/14/CSS/"/>
    <id>http://djave5656.com/2021/08/14/CSS/</id>
    <published>2021-08-14T14:26:27.000Z</published>
    <updated>2021-08-14T17:35:42.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a><font color=orange>流式布局</font></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a><font color=skyblue>概念</font></h3><blockquote><p>流式布局是一种等比例缩放布局方式，在CSS代码中使用百分比来设置宽度，也称百分比自适应的布局。</p></blockquote><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a><font color=skyblue>实现方法</font></h3><blockquote><p>流式布局实现方法是将CSS固定像素宽度换算为百分比宽度</p><blockquote><p>换算公式: <code>目标元素宽度/父盒子宽度=百分数宽度</code></p></blockquote></blockquote><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a><font color=skyblue>用途</font></h3><ul><li>移动端一般采用流式布局(百分比布局)</li></ul><h3 id="流式布局的特征"><a href="#流式布局的特征" class="headerlink" title="流式布局的特征"></a><font color=skyblue>流式布局的特征</font></h3><ol><li>宽度自适应，高度写死，并不是百分百还原设计图</li><li>对于大的轮播图等,宽度<code>100%</code>自适应</li><li>图标都是固定死大小的，包括字体等也是固定死的，并不是所有的东西都是自适应的</li><li>一些大的图片，设置宽度为百分比自适应即可，随着屏幕大小进行变化，对于小图标或者文本等, 一般都是定死宽高大小</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><font color=skyblue>缺点</font></h3><ul><li><em><strong><u style="color: Coral;">对于大屏幕来说,用户体验并不是特别好,有些布局元素会显得很长。</u></strong></em></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><font color=skyblue>解决方案</font></h3><ul><li><em><strong><u style="color: Coral;">rem布局(宽高自适应)</u></strong></em></li></ul><h3 id="经典的流式布局结构"><a href="#经典的流式布局结构" class="headerlink" title="经典的流式布局结构"></a><font color=skyblue>经典的流式布局结构</font></h3><ol><li>左侧固定，右侧自适应</li><li>右侧固定，左侧自适应</li><li>两侧固定，中间自适应（圣杯布局，双飞翼布局）</li><li>等分布局</li></ol><hr /><p>（具体实现下面会逐一介绍）</p><h4 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a><font color=Fuchsia>上代码</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>流式布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-right</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr /><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a><font color=orange>圣杯布局</font></h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a><font color=skyblue>概念</font></h3><blockquote><p>圣杯布局的出现是来自由 Matthew Levine 在 2006 年写的一篇文章 《In Search of the Holy Grail》。 比起双飞翼布局，它的起源不是源于对页面的形象表达。在西方，圣杯是表达“渴求之物”的意思。而双飞翼布局则是由淘宝UED的工程师（传说是玉伯）改进并传播开来，可以说是灵感来自于页面渲染。(想象一下圣杯是主体是加上两个耳朵；鸟儿是身体加上一对翅膀)</p></blockquote><h3 id="圣杯布局的特点"><a href="#圣杯布局的特点" class="headerlink" title="圣杯布局的特点"></a><font color=skyblue>圣杯布局的特点</font></h3><ol><li>浮动</li><li>负边距</li><li>相对定位</li><li>不添加额外标签</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a><font color=skyblue>优点</font></h3><ul><li><em><strong><u style="color: Coral;">结构简单，无多余<code>DOM</code>层</u></strong></em></li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a><font color=skyblue>缺点</font></h3><ul><li><em><strong><u style="color: Coral;">正常情况下是没有问题的，但是特殊情况下就会暴露此方案的弊端，如果将浏览器无线放大时，「圣杯」将会「破碎」掉。当中间部分的宽小于左侧部分时就会发生布局混乱。</u></strong></em></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>下图就是一个经典的圣杯布局和双飞翼布局的模型，即三列结构，左右两边定宽，中间自适应，能根据屏幕大小做响应</li></ul><p><img src="https://pic4.zhimg.com/v2-b01716cfa29a784d8a132ec99d7ef56b_b.gif"></p><h4 id="一、利用浮动实现"><a href="#一、利用浮动实现" class="headerlink" title="一、利用浮动实现"></a><font color=Fuchsia>一、利用浮动实现</font></h4><ul><li>先定义好<code>header</code>和<code>footer</code>的样式，使之横向撑满。</li><li>在<code>container</code>中的三列设为浮动和相对定位(后面会用到)，<code>center</code>要放在最前面，<code>footer</code>清除浮动。</li><li>三列的左右两列分别定宽<code>200px</code>和<code>150px</code>，中间部分<code>center</code>设置<code>100%</code>撑满</li><li>这样因为浮动的关系，<code>center</code>会占据整个<code>container</code>，左右两块区域被挤下去了</li><li>接下来设置<code>left</code>的 <code>margin-left: -100%;</code>，让<code>left</code>回到上一行最左侧</li><li>但这会把<code>center</code>给遮住了，所以这时给外层的<code>container</code>设置 <code>padding-left: 200px; padding-right: -150px;</code>，给left和right空出位置</li><li>这时<code>left</code>并没有在最左侧，因为之前已经设置过相对定位，所以通过 <code>left: -200px;</code> 把<code>left</code>拉回最左侧</li><li>同样的，对于<code>right</code>区域，设置 <code>margin-left: -150px;</code> 把<code>right</code>拉回第一行</li><li>这时右侧空出了<code>150px</code>的空间，所以最后设置 <code>right: -150px;</code>把<code>right</code>区域拉到最右侧就行了。</li></ul><h4 id="上代码-1"><a href="#上代码-1" class="headerlink" title="上代码"></a><font color=Fuchsia>上代码</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">min-width</span>: <span class="number">550px</span>;  <span class="comment">/* 2x leftContent width + rightContent width */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">  <span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">29</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">0.726</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding-left</span>: <span class="number">200px</span>;   <span class="comment">/* leftContent width */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">padding-right</span>: <span class="number">150px</span>;  <span class="comment">/* rightContent width */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">  <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">206</span>, <span class="number">201</span>, <span class="number">201</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">  <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;           <span class="comment">/* leftContent width */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">right</span>: <span class="number">200px</span>;           <span class="comment">/* leftContent width */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">95</span>, <span class="number">179</span>, <span class="number">235</span>, <span class="number">0.972</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">  <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">150px</span>;           <span class="comment">/* rightContent width */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">margin-left</span>: -<span class="number">150px</span>;   <span class="comment">/* rightContent width */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">right</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">231</span>, <span class="number">105</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr /><h4 id="二、利用flex弹性盒子来实现"><a href="#二、利用flex弹性盒子来实现" class="headerlink" title="二、利用flex弹性盒子来实现"></a><font color=Fuchsia>二、利用flex弹性盒子来实现</font></h4><ul><li><code>header</code>和<code>footer</code>设置样式，横向撑满。</li><li><code>container</code>中的<code>left、center、right</code>依次排布即可</li><li>给<code>container</code>设置弹性布局 <code>display: flex;</code></li><li><code>left</code>和<code>right</code>区域定宽，<code>center</code>设置 <code>flex: 1;</code> 即可</li></ul><h4 id="上代码-2"><a href="#上代码-2" class="headerlink" title="上代码"></a><font color=Fuchsia>上代码</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">min-width</span>: <span class="number">550px</span>;  </span></span><br><span class="line"><span class="css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">29</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">0.726</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="css">   <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">206</span>, <span class="number">201</span>, <span class="number">201</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;        </span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">95</span>, <span class="number">179</span>, <span class="number">235</span>, <span class="number">0.972</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">150px</span>;           </span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">231</span>, <span class="number">105</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr /><h4 id="三、利用grid布局来实现"><a href="#三、利用grid布局来实现" class="headerlink" title="三、利用grid布局来实现"></a><font color=Fuchsia>三、利用grid布局来实现</font></h4><p><img src="https://img-blog.csdnimg.cn/20190118111654298.jpg"></p><ul><li>如上图所示，我们把body划分成三行四列的网格，其中有5条列网格线<ul><li>给<code>body</code>元素添加<code>display: grid;</code>属性变成一个<code>grid</code>(网格)</li><li>给<code>header</code>元素设置<code>grid-row: 1; 和 grid-column: 1/5;</code><br>意思是占据第一行网格的从第一条列网格线开始到第五条列网格线结束</li><li>给<code>footer</code>元素设置<code>grid-row: 1; 和 grid-column: 1/5;</code><br>意思是占据第三行网格的从第一条列网格线开始到第五条列网格线结束</li><li>给<code>left</code>元素设置<code>grid-row: 2; 和 grid-column: 1/2;</code><br>意思是占据第二行网格的从第一条列网格线开始到第二条列网格线结束</li><li>给<code>center</code>元素设置<code>grid-row: 2; 和 grid-column: 2/4;</code><br>意思是占据第二行网格的从第二条列网格线开始到第四条列网格线结束</li><li>给<code>right</code>元素设置<code>grid-row: 2; 和 grid-column: 4/5;</code><br>意思是占据第二行网格的从第四条列网格线开始到第五条列网格线结束</li></ul></li></ul><h4 id="上代码-3"><a href="#上代码-3" class="headerlink" title="上代码"></a><font color=Fuchsia>上代码</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#header</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">29</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">0.726</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="css">    grid-row: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">    grid-column: <span class="number">1</span>/<span class="number">5</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="css">    grid-row: <span class="number">3</span>;</span></span><br><span class="line"><span class="css">    grid-column: <span class="number">1</span>/<span class="number">5</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="css">    grid-row: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">    grid-column: <span class="number">1</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">95</span>, <span class="number">179</span>, <span class="number">235</span>, <span class="number">0.972</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="css">    grid-row: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">    grid-column: <span class="number">2</span>/<span class="number">4</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">206</span>, <span class="number">201</span>, <span class="number">201</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">    grid-row: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">    grid-column: <span class="number">4</span>/<span class="number">5</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">231</span>, <span class="number">105</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>最后提醒一下很多朋友可能会忽略的小细节：在#center中，包含了一条声明width: 100%，这是中间栏能够做到自适应的关键。可能会有朋友认为不需要设置这条声明，因为觉得center在不设置宽度的情况下会默认将宽度设置为父元素(container)的100%宽度。但需要注意到，center是浮动元素，由于浮动具有包裹性，在不显式设置宽度的情况下会自动“收缩”到内容的尺寸大小。如果去掉width: 100%，则当中间栏不包含或者包含较少内容时，整个布局会“崩掉”，而达不到这样的效果。</p></blockquote><hr /><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a><font color=orange>双飞翼布局</font></h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a><font color=skyblue>概念</font></h3><blockquote><p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。</p><blockquote><p>不同在于解决 “中间栏div内容不被遮挡”问题的思路不一样。</p></blockquote></blockquote><h3 id="双飞翼布局的特点"><a href="#双飞翼布局的特点" class="headerlink" title="双飞翼布局的特点"></a><font color=skyblue>双飞翼布局的特点</font></h3><ol><li>双飞翼布局比圣杯布局多使用了<code>1</code>个<code>div</code>，少用大致<code>4</code>个<code>css</code>属性</li><li> 圣杯布局<code>container</code>的 <code>padding-left</code>和<code>padding-right</code>这<code>2</code>个属性，加上左右两个div用相对布局<code>position: relative</code>及对应的<code>right</code>和<code>left</code>共<code>4</code>个属性</li><li>而双飞翼布局子<code>div</code>里用<code>margin-left</code>和<code>margin-right</code>共<code>2</code>个属性，比圣杯布局思路更直接和简洁一点</li><li>双飞翼布局比圣杯布局多创建了一个<code>div</code>，但不用相对布局了。</li></ol><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a><font color=skyblue>目的</font></h3><blockquote><p>为了优先显示中间主要部分，浏览器渲染引擎在构建和渲染渲染树是异步的（谁先构建好谁先显示），故在编写时，先构建中间main部分，但由于布局原因，将left置于center左边，故而出现了双飞翼布局。</p></blockquote><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><font color=skyblue>优点</font></h3><ul><li><em><strong><u style="color: Coral;">支持各种高度变化，通用性强</u></strong></em></li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a><font color=skyblue>缺点</font></h3><ul><li><em><strong><u style="color: Coral;">多加了一层dom节点，增加渲染树生成的计算量</u></strong></em></li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h4 id="上代码-4"><a href="#上代码-4" class="headerlink" title="上代码"></a><font color=Fuchsia>上代码</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.col</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#main-wrap</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">190px</span>;</span></span><br><span class="line"><span class="css">      <span class="comment">/*这是圣杯和双飞翼最明显的区别，在main内部使用的是margin，而圣杯是直接在container部分使用padding*/</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#left</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#0000FF</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#FF0000</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-wrap&quot;</span>&gt;</span> #main <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绝对定位布局"><a href="#绝对定位布局" class="headerlink" title="绝对定位布局"></a><font color=orange>绝对定位布局</font></h2><p><u><strong>这里就不展开说了</strong></u></p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a><font color=skyblue>优点</font></h3><ul><li><em><strong><u style="color: Coral;">结构简单，无需清理浮动</u></strong></em></li></ul><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a><font color=skyblue>缺点</font></h3><ul><li><em><strong><u style="color: Coral;">两侧高度无法支撑总高度</u></strong></em></li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><h4 id="上代码-5"><a href="#上代码-5" class="headerlink" title="上代码"></a><font color=Fuchsia>上代码</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">header</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;col main&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;col left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;col right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果正常，将<code>main</code>更改后结构层正常显示，但是将其<code>left</code>与<code>right</code>的高度改为<code>300px</code>后，出现了异常，故而总结得到定位非主要元素，撑不起整个高度</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CSS" scheme="http://djave5656.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://djave5656.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Linux 中的相关命令</title>
    <link href="http://djave5656.com/2021/08/14/Linux/"/>
    <id>http://djave5656.com/2021/08/14/Linux/</id>
    <published>2021-08-14T02:27:54.000Z</published>
    <updated>2021-08-14T15:38:50.011Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="购买连接云服务器"><a href="#购买连接云服务器" class="headerlink" title="购买连接云服务器"></a><font color=orange>购买连接云服务器</font></h2><h3 id="购买平台"><a href="#购买平台" class="headerlink" title="购买平台"></a><font color=skyblue>购买平台</font></h3><ul><li><a class="btn-beautify button--animated green larger" href="https://cloud.tencent.com/"   title="腾讯云"><i class="far fa-hand-point-right"></i><span>腾讯云</span></a></li><li><a class="btn-beautify button--animated green larger" href="https://www.aliyun.com/"   title="阿里云"><i class="far fa-hand-point-right"></i><span>阿里云</span></a></li></ul><h3 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a><font color=skyblue>Linux 系统</font></h3><ul><li><code>centos</code></li><li><code>redhat</code></li></ul><hr /><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a><font color=orange>操作命令</font></h2><ul><li>建立链接：<code>ssh 用户名@ip地址</code></li><li>查看文件位置：<code>pwd</code></li><li>查看当前目录下的文件和文件夹：<code>ll</code><ul><li>区分文件和文件夹：看首字母<ul><li><code>d</code>: 文件夹</li><li><code>l</code>: 软链接</li><li><code>~</code>：文件</li></ul></li></ul></li><li>创建文件夹：<code>mkdir 目录名</code></li><li>创建文件：<code>touch 文件名</code></li><li>删除文件/文件夹：<ul><li><code>rm -rf 文件/文件夹</code></li><li><code>rm -rf /* 不要使用</code></li><li><code>rm -rf * 也不要使用</code></li></ul></li><li>查看文件内容：<code>cat 文件</code></li><li>编辑文件：<code>vi 文件</code><ul><li>三种模式<ul><li>一般模式：使用 <code>vi</code> 命令回车之后默认进入的就是一般模式（删除指令模式中的:）<ul><li>特点：不能编辑文件内容，只能通过一些快捷键去操作文件内容</li><li><code>dd</code>: 删除一行数据</li><li><code>yy</code>: 赋值一行数据</li><li><code>p</code>: 粘贴一行数据</li><li><code>u</code>: 撤销操作</li></ul></li><li>编辑模式：自由编辑<ul><li>如何进入<ul><li>在一般模式下按 <code>a</code> || <code>A</code> || <code>i</code> || <code>I</code> || <code>o</code> || <code>O</code></li></ul></li></ul></li><li>指令模式：只能从一般模式进入<ul><li><code>:q</code>：退出</li><li><code>:w</code>：保存</li><li><code>:wq</code>：保存退出</li></ul></li></ul></li></ul></li><li>Linux 上文件安装<ul><li>压缩包安装：<code>.tar.gz</code>, <code>.tar.xz</code><ul><li><code>.tar.gz</code>: <code>tar -zxvf xxx.tar.gz -C 解压的路径</code></li><li><code>.tar.xz</code>: <code>tar -xvf xxx.tar.xz -C 解压的路径</code></li></ul></li><li>使用安装包安装：<code>.rpm</code><ul><li>查看包<ul><li><code>rpm -qa | grep mysql</code></li></ul></li><li>安装包<ul><li><code>rpm -ivh 包名</code></li></ul></li></ul></li><li>使用软件商店安装: <code>yum</code><ul><li><code>yum install -y 软件名</code></li><li><code>yum update 软件名</code></li><li><code>yum remove 软件名</code></li></ul></li></ul></li><li>Windows上复制一个文件到Linux服务器<ul><li><code>scp -r 本地需要上传的文件路径 root@192.168.100.80:/opt</code></li></ul></li><li>配置环境变量 vim /etc/profile<ul><li>进入文件之后光标移动到最后一行 按<code>o</code>开始配置 <code>export PATH=$PATH</code></li><li>环境变量配置完成之后需要执行如下命令把配置文件进行加载</li></ul></li></ul><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="http://djave5656.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://djave5656.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>HTML中的相关概念</title>
    <link href="http://djave5656.com/2021/08/12/HTML/"/>
    <id>http://djave5656.com/2021/08/12/HTML/</id>
    <published>2021-08-12T02:55:51.000Z</published>
    <updated>2021-08-14T15:40:01.897Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="HTML-中常用的标签"><a href="#HTML-中常用的标签" class="headerlink" title="HTML 中常用的标签"></a><font color=orange>HTML 中常用的标签</font></h2><span id="more"></span><ol><li>布局： div 分天下</li><li>文本类： h1~h6, p, span, strong, em, b, br</li><li>文本修饰标签：b, strong, i, em, s, u</li><li>表单：input, select, button, textarea, fieldset, lengend, label, option</li><li>表格：tabel, th, td, caption, tr, tbody, thead</li><li>列表：ul, li, dl, dd, dt, ol</li><li>其他：a, img, meta, link, script, code, pre</li></ol><hr /><h2 id="HTML5-新增的布局语义化标签"><a href="#HTML5-新增的布局语义化标签" class="headerlink" title="HTML5 新增的布局语义化标签"></a><font color=orange>HTML5 新增的布局语义化标签</font></h2><ul><li>article aside footer header nav section</li></ul><hr /><h2 id="HTML中常用的实体"><a href="#HTML中常用的实体" class="headerlink" title="HTML中常用的实体"></a><font color=orange>HTML中常用的实体</font></h2><table><thead><tr><th align="center">代码</th><th align="center">效果</th><th align="center">代码</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">&amp;quot;</td><td align="center">“</td><td align="center">&amp;amp;</td><td align="center">&amp;</td></tr><tr><td align="center">&amp;lt;</td><td align="center">&lt;</td><td align="center">&amp;gt;</td><td align="center">&gt;</td></tr><tr><td align="center">&amp;nbsp;</td><td align="center">空格</td><td align="center">&amp;copy;</td><td align="center">©</td></tr><tr><td align="center">&amp;sect;</td><td align="center">§</td><td align="center">&amp;curren;</td><td align="center">¤</td></tr></tbody></table><hr /><h2 id="标签使用中的注意点"><a href="#标签使用中的注意点" class="headerlink" title="标签使用中的注意点"></a><font color=orange>标签使用中的注意点</font></h2><blockquote><p>字体标签在SEO中的权重：标签 h1&gt;h2&gt;h3&gt;h4&gt;h5&gt;h6 加重语气的标签 strong &gt; b em &gt; i<br>SEO：是指在了解搜索引擎自然排名机制的基础上，对网站进行内部及外部的调整优化，改进网站在搜索引擎中的关键词自然排名，获得更多流量， 从而达成网站销售及品牌建设的目标。</p></blockquote><hr /><h2 id="常用标签的相关属性"><a href="#常用标签的相关属性" class="headerlink" title="常用标签的相关属性"></a><font color=orange>常用标签的相关属性</font></h2><h3 id="链接标签（a标签）"><a href="#链接标签（a标签）" class="headerlink" title="链接标签（a标签）"></a><font color=skyblue>链接标签（a标签）</font></h3><blockquote><p>链接是指从一个页面指向到另一个目标体，目标体可以是一个图片，也可以是一个网页，也可以是一个文件等，超链接是网络的灵魂，使用的HTML标记是<a>标记。</p></blockquote><hr />]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;HTML-中常用的标签&quot;&gt;&lt;a href=&quot;#HTML-中常用的标签&quot; class=&quot;headerlink&quot; title=&quot;HTML 中常用的标签&quot;&gt;&lt;/a&gt;&lt;font color=orange&gt;HTML 中常用的标签&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="HTML" scheme="http://djave5656.com/categories/HTML/"/>
    
    
    <category term="HTML" scheme="http://djave5656.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>开发中常用的网站</title>
    <link href="http://djave5656.com/2021/08/12/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://djave5656.com/2021/08/12/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/</id>
    <published>2021-08-11T19:15:41.000Z</published>
    <updated>2021-08-21T09:56:28.752Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a><font color=orange>前端开发</font></h2><span id="more"></span><table><thead><tr><th align="center"><em><strong><a href="https://developer.mozilla.org/zh-CN/docs/Learn">MDN</a></strong></em></th><th align="center"><em><strong><a href="https://element.eleme.cn/#/zh-CN">Element UI中文</a></strong></em></th><th align="center"><em><strong><a href="https://www.bootcdn.cn/">BootCDN中文</a></strong></em></th></tr></thead><tbody><tr><td align="center"><em><strong><a href="https://cn.vuejs.org/index.html">Vue2</a></strong></em></td><td align="center"><em><strong><a href="https://v3.cn.vuejs.org/">Vue3</a></strong></em></td><td align="center"><em><strong><a href="https://element-plus.gitee.io/#/zh-CN">Element Plus</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.bootcss.com/">Bootstrap</a></strong></em></td><td align="center"><em><strong><a href="https://www.gulpjs.com.cn/">Gulp</a></strong></em></td><td align="center"><em><strong><a href="https://www.npmjs.com/">npm</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://axios-http.com/zh/docs/intro">Axios</a></strong></em></td><td align="center"><em><strong><a href="https://flexbox.malven.co/">CSS Flex</a></strong></em></td><td align="center"><em><strong><a href="https://www.caniuse.com/">caniuse</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://less.bootcss.com/">Less中文网</a></strong></em></td><td align="center"><em><strong><a href="https://www.sass.hk/">Sass中文网</a></strong></em></td><td align="center"><em><strong><a href="https://echarts.apache.org/zh/index.html">ECharts中文</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.layui.com/">Layui</a></strong></em></td><td align="center"><em><strong><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/">Vant中文</a></strong></em></td><td align="center"><em><strong><a href="https://ant.design/index-cn">Ant Design中文</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://nutui.jd.com/#/index">NutUI</a></strong></em></td><td align="center"><em><strong><a href="https://jquery.cuishifeng.cn/">jQuery</a></strong></em></td><td align="center"><em><strong><a href="https://promisesaplus.com/">promises/A+</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://zh-hans.reactjs.org/">React中文网</a></strong></em></td><td align="center"><em><strong><a href="https://reactrouter.com/web/guides/quick-start">React Router</a></strong></em></td><td align="center"><em><strong><a href="https://www.wangeditor.com/">wangEditor</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.tslang.cn/">TS中文网</a></strong></em></td><td align="center"><em><strong><a href="https://webpack.docschina.org/">Webpack中文网</a></strong></em></td><td align="center"><em><strong><a href="https://www.babeljs.cn/docs/">Babel中文网</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.w3cplus.com/">W3cplus</a></strong></em></td><td align="center"><em><strong><a href="https://es6.ruanyifeng.com/">ES6阮一峰</a></strong></em></td><td align="center"><em><strong><a href="https://www.zhangxinxu.com/">张鑫旭的个人主页</a></strong></em></td></tr></tbody></table><h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a><font color=orange>后端开发</font></h2><table><thead><tr><th align="center"><em><strong><a href="https://www.liaoxuefeng.com/">廖雪峰官方网站</a></strong></em></th><th align="center"><em><strong><a href="https://www.php.cn/">PHP中文网</a></strong></em></th><th align="center"><em><strong><a href="https://www.expressjs.com.cn/">Express中文网</a></strong></em></th></tr></thead><tbody><tr><td align="center"><em><strong><a href="https://nodejs.org/zh-cn/">nodejs中文网</a></strong></em></td><td align="center"><em><strong><a href="https://nodejs.org/zh-cn/">MongoDB中文教程</a></strong></em></td><td align="center"><em><strong><a href="https://man.linuxde.net/">Linux命令大全</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.djangoproject.com/">Django</a></strong></em></td><td align="center"><em><strong><a href="https://www.koajs.com.cn/">Koa中文教程</a></strong></em></td><td align="center"><em><strong><a href="https://eggjs.org/zh-cn/">Egg中文</a></strong></em></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前端开发&quot;&gt;&lt;a href=&quot;#前端开发&quot; class=&quot;headerlink&quot; title=&quot;前端开发&quot;&gt;&lt;/a&gt;&lt;font color=orange&gt;前端开发&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="site" scheme="http://djave5656.com/categories/site/"/>
    
    
    <category term="常用网站" scheme="http://djave5656.com/tags/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
</feed>
